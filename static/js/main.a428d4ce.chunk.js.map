{"version":3,"sources":["components/GlasgowQuestion/GlasgowQuestion.js","components/GlasgowForm/GlasgowForm.js","components/GlasgowResultIcon/GlasgowResultIcon.js","components/Navbar/Navbar.js","components/About/About.js","components/Footer/Footer.js","data/GlasgowData.js","helpers/randomIntInclusive.js","GlasgowScale.js","App.js","serviceWorker.js","index.js"],"names":["GlasgowQuestion","props","show","displayAnswers","react_default","a","createElement","className","gElement","style","display","gScore","GlasgowForm","handleChange","e","_this","userInputChange","target","value","handleSubmit","preventDefault","addUserAnswer","userInput","onSubmit","this","type","onChange","maxLength","autoFocus","Component","GlasgowResultIcon","icon","totalScore","userAnswer","Navbar","About","href","rel","Footer","scale","eye","1","text","score","2","3","4","verbal","5","motor","6","getRandomIntInclusive","min","max","Math","ceil","floor","random","GlasgowScale","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","generateRandom","eyeNum","verbalNum","motorNum","setState","elements","generateRandomSolo","obj","num","num2","keys","length","input","handleSoloClick","oldState","soloQuestion","state","handleDisplayAnswers","handleNextQuestion","_this2","map","components_GlasgowQuestion_GlasgowQuestion","key","uuid","components_GlasgowResultIcon_GlasgowResultIcon","color","components_Navbar_Navbar","onClick","backgroundColor","components_GlasgowForm_GlasgowForm","components_About_About","components_Footer_Footer","App","src_GlasgowScale_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+XAaeA,SAVS,SAACC,GACvB,IAAIC,EAAOD,EAAME,eAAiB,eAAiB,OACnD,OACEC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,YAAOL,EAAMO,UACbJ,EAAAC,EAAAC,cAAA,QAAOG,MAAO,CAAEC,QAASR,IAASD,EAAMU,WCkB/BC,oNArBbC,aAAe,SAACC,GACdC,EAAKd,MAAMe,gBAAgBF,EAAEG,OAAOC,UAGtCC,aAAe,SAACL,GACdA,EAAEM,iBACFL,EAAKd,MAAMoB,cAAcN,EAAKd,MAAMqB,oFAIpC,OAEIlB,EAAAC,EAAAC,cAAA,QAAMiB,SAAUC,KAAKL,aAAcZ,UAAU,eAC3CH,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,OAAOP,MAAOM,KAAKvB,MAAMqB,UAAWI,SAAUF,KAAKX,aAAcc,UAAU,IAAIC,WAAS,IACpGxB,EAAAC,EAAAC,cAAA,gCAhBgBuB,cCMXC,SANW,SAAC7B,GACzB,IAAI8B,EAEJ,OADuCA,EAAvC9B,EAAM+B,YAAc/B,EAAMgC,WAAoB7B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yCAAb,gBAA+EH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sCAAb,UACtHH,EAAAC,EAAAC,cAAA,SAAIyB,KCKEG,SARA,WACb,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,mCCUS6B,SAbD,WACZ,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,SAAV,KACAH,EAAAC,EAAAC,cAAA,8HACAF,EAAAC,EAAAC,cAAA,wVAGAF,EAAAC,EAAAC,cAAA,oFAA6EF,EAAAC,EAAAC,cAAA,KAAG8B,KAAK,mDAAmDnB,OAAO,SAASoB,IAAI,uBAA/E,iBCApEC,SARA,WACb,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACbH,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,KAAG8B,KAAK,oDAAoDnB,OAAO,SAASoB,IAAI,uBAAhF,qBAAV,wBCNDE,SAAQ,CACZC,IAAK,CACHC,EAAG,CAAEC,KAAM,iBAAkBC,MAAO,GACpCC,EAAG,CAAEF,KAAM,sBAAuBC,MAAO,GACzCE,EAAG,CAAEH,KAAM,uBAAwBC,MAAO,GAC1CG,EAAG,CAAEJ,KAAM,0BAA2BC,MAAO,IAE/CI,OAAQ,CACNN,EAAG,CAAEC,KAAM,qBAAsBC,MAAO,GACxCC,EAAG,CAAEF,KAAM,0BAA2BC,MAAO,GAC7CE,EAAG,CAAEH,KAAM,sBAAuBC,MAAO,GACzCG,EAAG,CAAEJ,KAAM,wBAAyBC,MAAO,GAC3CK,EAAG,CAAEN,KAAM,+BAAgCC,MAAO,IAEpDM,MAAO,CACLR,EAAG,CAAEC,KAAM,oBAAqBC,MAAO,GACvCC,EAAG,CAAEF,KAAM,8BAA+BC,MAAO,GACjDE,EAAG,CAAEH,KAAM,2BAA4BC,MAAO,GAC9CG,EAAG,CAAEJ,KAAM,uBAAwBC,MAAO,GAC1CK,EAAG,CAAEN,KAAM,kBAAmBC,MAAO,GACrCO,EAAG,CAAER,KAAM,iBAAkBC,MAAO,MCpBlCQ,EAAwB,SAACC,EAAKC,GAGlC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GCqHxCM,cA1Gb,SAAAA,EAAYzD,GAAO,IAAAc,EAAA,OAAA4C,OAAAC,EAAA,EAAAD,CAAAnC,KAAAkC,IACjB3C,EAAA4C,OAAAE,EAAA,EAAAF,CAAAnC,KAAAmC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvC,KAAMvB,KAgBR+D,eAAiB,WACf,IAAIC,EAASd,EAAsB,EAAG,GAClCe,EAAYf,EAAsB,EAAG,GACrCgB,EAAWhB,EAAsB,EAAG,GACxCpC,EAAKqD,SAAS,CACZC,SAAU,CAAC9B,EAAMC,IAAIyB,GAAS1B,EAAMQ,OAAOmB,GAAY3B,EAAMU,MAAMkB,IACnEnC,WAAYiC,EAASC,EAAYC,EACjClC,WAAY,GACZX,UAAW,GACXnB,gBAAgB,KA1BDY,EA8BnBuD,mBAAqB,WACnB,IACIC,EADAC,EAAMrB,EAAsB,EAAG,GAEpBoB,EAAH,IAARC,EAAiBjC,EAAK,IACT,IAARiC,EAAiBjC,EAAK,OACpBA,EAAK,MAChB,IAAIkC,EAAOtB,EAAsB,EAAGQ,OAAOe,KAAKH,GAAKI,QACrD5D,EAAKqD,SAAS,CACZC,SAAU,CAACE,EAAIE,IACfzC,WAAYyC,EACZxC,WAAY,GACZX,UAAW,GACXnB,gBAAgB,KA1CDY,EA8CnBM,cAAgB,SAACmD,GACfzD,EAAKqD,SAAS,CAAEnC,WAAY,IAAM,WAChClB,EAAKqD,SAAS,CAAEnC,WAAYuC,OAhDbzD,EAoDnBC,gBAAkB,SAAC4D,GACjB7D,EAAKqD,SAAS,CAAE9C,UAAWsD,KArDV7D,EAwDnB8D,gBAAkB,WAChB9D,EAAKqD,SAAS,SAAAU,GACZ,MAAO,CAAEC,cAAeD,EAASC,eAChC,WAAQhE,EAAKiE,MAAMD,aAAehE,EAAKuD,qBAAuBvD,EAAKiD,oBA3DrDjD,EA8DnBkE,qBAAuB,WACrBlE,EAAKqD,SAAS,CAAEjE,gBAAiBY,EAAKiE,MAAM7E,kBA/D3BY,EAkEnBmE,mBAAqB,WACnBnE,EAAKiE,MAAMD,aAAehE,EAAKuD,qBAAuBvD,EAAKiD,kBAhE3DjD,EAAKiE,MAAQ,CACXhD,WAAY,GACZC,WAAY,GACZX,UAAW,GACX+C,SAAU,GACVlE,gBAAgB,EAChB4E,cAAc,GATChE,mFAcjBS,KAAKwC,kDAwDE,IAAAmB,EAAA3D,KACH6C,EAAW7C,KAAKwD,MAAMX,SAASe,IAAI,SAAAtE,GAAC,OAAIV,EAAAC,EAAAC,cAAC+E,EAAD,CAAiB7E,SAAUM,EAAE4B,KAAM/B,OAAQG,EAAE6B,MAAOxC,eAAgBgF,EAAKH,MAAM7E,eAAgBmF,IAAKC,UAC5IxD,EAAiC,KAA1BP,KAAKwD,MAAM/C,WAAoB,GAAK7B,EAAAC,EAAAC,cAACkF,EAAD,CAAmBxD,WAAYR,KAAKwD,MAAMhD,WAAYC,WAAYT,KAAKwD,MAAM/C,aACxHwD,EAAQ,UAKZ,MAJ8B,KAA1BjE,KAAKwD,MAAM/C,aACoCwD,EAAjDjE,KAAKwD,MAAM/C,YAAcT,KAAKwD,MAAMhD,WAAqB,WAAqB,YAI9E5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoF,EAAD,MACAtF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UAAQqF,QAASnE,KAAKqD,iBAAkBrD,KAAKwD,MAAMD,aAAe,gBAAkB,eAApF,WACA3E,EAAAC,EAAAC,cAAA,UAAQqF,QAASnE,KAAKyD,sBAAuBzD,KAAKwD,MAAM7E,eAAiB,cAAgB,iBAAzF,YAEFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BE,MAAO,CAAEmF,gBAAiBH,IAClErF,EAAAC,EAAAC,cAACuF,EAAD,CAAaxE,cAAeG,KAAKH,cAAeL,gBAAiBQ,KAAKR,gBAAiBM,UAAWE,KAAKwD,MAAM1D,YAC7GlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAgCwB,GAC/C3B,EAAAC,EAAAC,cAAA,UAAQqF,QAASnE,KAAK0D,mBAAoB3E,UAAU,gCAApD,UAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,uBACC+D,EACA7C,KAAKwD,MAAM7E,eAAiBC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAb,UAA2CiB,KAAKwD,MAAMhD,YAAkB,MAI3G5B,EAAAC,EAAAC,cAACwF,EAAD,MACA1F,EAAAC,EAAAC,cAACyF,EAAD,cArGmBlE,mBCDZmE,MARf,WACE,OACE5F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2F,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpG,EAAAC,EAAAC,cAACmG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a428d4ce.chunk.js","sourcesContent":["import React from 'react'\r\nimport './GlasgowQuestion.css'\r\n\r\nconst GlasgowQuestion = (props) => {\r\n  let show = props.displayAnswers ? 'inline-block' : 'none'\r\n  return (\r\n    < div className='GlasgowQuestion-container' >\r\n      <span>{props.gElement}</span>\r\n      <span  style={{ display: show }}>{props.gScore}</span>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default GlasgowQuestion","import React, { Component } from 'react'\r\nimport './GlasgowForm.css'\r\n\r\nclass GlasgowForm extends Component {\r\n\r\n  handleChange = (e) => {\r\n    this.props.userInputChange(e.target.value)\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    this.props.addUserAnswer(this.props.userInput)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n        <form onSubmit={this.handleSubmit} className='GlasgowForm' >\r\n          <input type='text' value={this.props.userInput} onChange={this.handleChange} maxLength=\"2\" autoFocus />\r\n          <button>Check </button>\r\n        </form>\r\n    \r\n    )\r\n  }\r\n}\r\n\r\nexport default GlasgowForm","import React from 'react'\r\nimport './GlasgowResultIcon.css'\r\n\r\nconst GlasgowResultIcon = (props) => {\r\n  let icon\r\n  props.totalScore == props.userAnswer ? icon = <i className=\"material-icons animated fadeIn green \">check_circle</i> : icon = <i className=\"material-icons animated fadeIn red\">cancel</i>\r\n  return <p>{icon}</p>\r\n}\r\n\r\nexport default GlasgowResultIcon\r\n\r\n","import React from 'react'\r\nimport './Navbar.css'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className='Navbar'>\r\n      <h1>Glasgow Coma Scale</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport './About.css'\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className='About-container'>\r\n      <h2>About <i className=\"material-icons\">build</i> </h2>\r\n      <p>&nbsp; This tool was created for medical professionals to help them practise and  memorize the Glasgow Coma Scale. </p>\r\n      <p>&nbsp;  Sometimes, it may generate unlikely scenarios, however, there was no goal to prevent it from happening  because it \r\n        doesn't affect the general idea behind this tool. An example of unlikely scenario would be: best eye opening - no eye\r\n        opening (1), best verbal response - orientated(5),  best motor response - obeys commands(6).</p>     \r\n      <p>&nbsp; Detailed information about  the Glasgow Coma Scale can be found on <a href=\"https://en.wikipedia.org/wiki/Glasgow_Coma_Scale\" target='_blank' rel=\"noopener noreferrer\">Wikipedia</a></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport './Footer.css'\r\n\r\nconst Footer = () => {\r\n  return(\r\n    <div className ='Footer'>\r\n       <p>2019 | <a href=\"https://github.com/SergiiMost/glasgow-scale-react\" target='_blank' rel=\"noopener noreferrer\">Github repository</a> </p> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","const scale = {\r\n  eye: {\r\n    1: { text: \"No eye opening\", score: 1 },\r\n    2: { text: \"Eye opening to pain\", score: 2 },\r\n    3: { text: \"Eye opening to sound\", score: 3 },\r\n    4: { text: \"Eyes open spontaneously\", score: 4 }\r\n  },\r\n  verbal: {\r\n    1: { text: \"No verbal response\", score: 1 },\r\n    2: { text: \"Incomprehensible sounds\", score: 2 },\r\n    3: { text: \"Inappropriate words\", score: 3 },\r\n    4: { text: \"Confused, disoriented\", score: 4 },\r\n    5: { text: \"Oriented, converses normally\", score: 5 }\r\n  },\r\n  motor: {\r\n    1: { text: \"No motor response\", score: 1 },\r\n    2: { text: \"Abnormal extension to pain \", score: 2 },\r\n    3: { text: \"Abnormal flexion to pain\", score: 3 },\r\n    4: { text: \"Withdrawal from pain\", score: 4 },\r\n    5: { text: \"Localizing pain\", score: 5 },\r\n    6: { text: \"Obeys commands\", score: 6 }\r\n  }\r\n}\r\n\r\nexport { scale }\r\n\r\n","const getRandomIntInclusive = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport { getRandomIntInclusive }\r\n","import React, { Component } from 'react'\r\nimport GlasgowQuestion from './components/GlasgowQuestion/GlasgowQuestion'\r\nimport GlasgowForm from './components/GlasgowForm/GlasgowForm'\r\nimport GlasgowResultIcon from './components/GlasgowResultIcon/GlasgowResultIcon'\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport About from './components/About/About'\r\nimport Footer from './components/Footer/Footer'\r\nimport uuid from \"uuid/v4\"\r\n\r\nimport './GlasgowScale.css'\r\nimport { scale } from './data/GlasgowData'\r\nimport { getRandomIntInclusive } from './helpers/randomIntInclusive'\r\n\r\nclass GlasgowScale extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      totalScore: '',\r\n      userAnswer: '',\r\n      userInput: '',\r\n      elements: [],\r\n      displayAnswers: false,\r\n      soloQuestion: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateRandom()\r\n  }\r\n\r\n  generateRandom = () => {\r\n    let eyeNum = getRandomIntInclusive(1, 4)\r\n    let verbalNum = getRandomIntInclusive(1, 5)\r\n    let motorNum = getRandomIntInclusive(1, 6)\r\n    this.setState({\r\n      elements: [scale.eye[eyeNum], scale.verbal[verbalNum], scale.motor[motorNum]],\r\n      totalScore: eyeNum + verbalNum + motorNum,\r\n      userAnswer: '',\r\n      userInput: '',\r\n      displayAnswers: false\r\n    })\r\n  }\r\n\r\n  generateRandomSolo = () => {\r\n    let num = getRandomIntInclusive(1, 3)\r\n    let obj\r\n    if (num === 1) obj = scale['eye']\r\n    else if (num === 2) obj = scale['verbal']\r\n    else obj = scale['motor']\r\n    let num2 = getRandomIntInclusive(1, Object.keys(obj).length)\r\n    this.setState({\r\n      elements: [obj[num2]],\r\n      totalScore: num2,\r\n      userAnswer: '',\r\n      userInput: '',\r\n      displayAnswers: false\r\n    })\r\n  }\r\n\r\n  addUserAnswer = (num) => {\r\n    this.setState({ userAnswer: '' }, () => {\r\n      this.setState({ userAnswer: num })\r\n    })\r\n  }\r\n\r\n  userInputChange = (input) => {\r\n    this.setState({ userInput: input })\r\n  }\r\n\r\n  handleSoloClick = () => {\r\n    this.setState(oldState => {\r\n      return { soloQuestion: !oldState.soloQuestion }\r\n    }, () => { this.state.soloQuestion ? this.generateRandomSolo() : this.generateRandom() })\r\n  }\r\n\r\n  handleDisplayAnswers = () => {\r\n    this.setState({ displayAnswers: !this.state.displayAnswers })\r\n  }\r\n\r\n  handleNextQuestion = () => {\r\n    this.state.soloQuestion ? this.generateRandomSolo() : this.generateRandom()\r\n  }\r\n\r\n  render() {\r\n    let elements = this.state.elements.map(e => <GlasgowQuestion gElement={e.text} gScore={e.score} displayAnswers={this.state.displayAnswers} key={uuid()} />)\r\n    let icon = this.state.userAnswer === '' ? '' : <GlasgowResultIcon totalScore={this.state.totalScore} userAnswer={this.state.userAnswer} />\r\n    let color = '#e3f2fd'\r\n    if (this.state.userAnswer !== '') {\r\n      this.state.userAnswer == this.state.totalScore ? color = '#c8e6c9 ' : color = '#ffcdd2 '\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <div className='GlasgowScale-container'>\r\n          <div className='GlasgowScale-btn'>\r\n            <button onClick={this.handleSoloClick}>{this.state.soloQuestion ? 'Glasgow scale' : 'Solo element'} &rarr;</button>\r\n            <button onClick={this.handleDisplayAnswers}>{this.state.displayAnswers ? 'Hide answer' : 'Display answer'} &rarr;</button>\r\n          </div>\r\n          <div className='GlasgowScale-controlers ' style={{ backgroundColor: color }}>\r\n            <GlasgowForm addUserAnswer={this.addUserAnswer} userInputChange={this.userInputChange} userInput={this.state.userInput} />\r\n            <div className='GlasgowScale-controlers-icon'>{icon}</div>\r\n            <button onClick={this.handleNextQuestion} className='GlasgowScale-controlers-next' >Next </button>\r\n          </div>\r\n          <div className='GlasgowScale-elements-container'>\r\n            <div className='GlasgowScale-elements'>\r\n              <p> Patient: </p>\r\n              {elements}\r\n              {this.state.displayAnswers ? <p className='GlasgowScale-answer'>Total: {this.state.totalScore}</p> : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <About />\r\n        <Footer/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GlasgowScale\r\n\r\n","import React from 'react';\nimport GlasgowScale from './GlasgowScale'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlasgowScale />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}